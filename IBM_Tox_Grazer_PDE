################################################################
# IBM for evolution of cells producing toxins as a public good #
#               Author: Elias Ehrlich                          #
#                 Date: 18/11/2019                             #
################################################################
# Packages
using Plots
using Colors
using Random
#using DSP
using FastConv # manually modified package by replacing "conv2" with "conv" in elseif-clause, and adding "using DSP"
using BenchmarkTools
using Distributed

include("./IBM_Tox_Functions_PDE")
using .IBM_Tox_Functions_PDE

Random.seed!(1234)

# Parameters
## Resolution: Time step [days], grid cell size [cm]
const dt=0.2 #0.02
const dx=1   #0.5

## Space width [cm] and simulation time [days]
const L=50
const tmax=25

## Number of grid cells on each axis, number of non-toxic and toxic cells, number of time steps
const Ngrid=ceil(Int, L/dx)
const Nnon=1000
const Ntox=100
const Nt=ceil(Int, tmax/dt)

## Initial, spatially averaged nutrient concentration [nmol ml^-1]
const K=0.1*dx^2  #0.01*dx^2

## Decay rate of toxins [d^-1], toxin leakage rate [1 fmol d^-1]
const λ=0.2
const Q=1.0

## Max. growth rate, natural mortality rate, max. grazing (loss) rate [d^-1]
const rtox=0.38
const rnon=0.40
const dtox=0.15
const dnon=0.15
const atox=0.2
const anon=0.2

## Max. birth probabilities, natural death probability and maximum graz. mortality probability
const Ptox=exp(rtox*dt)-1     #0.45
const Pnon=exp(rnon*dt)-1     #0.5
const mtox=-exp(-dtox*dt)+1   #0.15
const mnon=-exp(-dnon*dt)+1   #0.15
const Gtox=-exp(-atox*dt)+1   #0.2
const Gnon=-exp(-anon*dt)+1   #0.2

## Half-saturation constants for nutrients [nmol dx^-2] and toxin effect [fmol dx^-2]
const HC=K/5
const HT=0.1*dx^2

## Cell quota [nmol N cell^-1]
const qN=0.01

## Diffusivity of nutrients, toxins and cells [cm^2 d^-1]
const Dn=0.864
const Dc=8.640

## Average diffusion distance of cells [units: dx=number of grid cells] per time step dt
const Δ=sqrt(2*Dc*dt)/dx

## Diffusion kernel (1 or 2 dimension). Warning! Dn/dx/dx*dt must be <1/3
const α=Dn/dx/dx*dt

function InitSimPlot()
    if α>1/3
        error("Time step to large")
    end
    kernel=α*[1,-2,1] + [0,1,0]

    kernel_2D=zeros(3,3)
    kernel_2D[2,:]=kernel
    for i in 1:3
        k2D = convn(kernel_2D[:,i],kernel) # convn is from Package FastConv
        kernel_2D[:,i]=k2D[2:end-1]
    end

    # Initialization of nutrient conc., toxin conc. and cell positions
    C=fill(K,Ngrid,Ngrid)#2*K*rand(Ngrid,Ngrid)
    T=zeros(Ngrid,Ngrid)

    xnon=ceil.(Int,rand(Nnon)*Ngrid)
    ynon=ceil.(Int,rand(Nnon)*Ngrid)
    xtox=ceil.(Int,rand(Ntox)*Ngrid)
    ytox=ceil.(Int,rand(Ntox)*Ngrid)

    FreqTox=zeros(Nt+1)                 # Frequency of toxic cells
    FreqTox[1]=Ntox/(Ntox+Nnon)         # Initial frequency of toxic cells
    PopDens=zeros(Nt+1,2)               # Population density of non-toxic and toxic cells
    PopDens[1,:]=[Nnon,Ntox]            # Initial population densities

    # Run simulation
    @time C, T, xnon, ynon, xtox, ytox, FreqTox, PopDens = IBM_Tox_Functions_PDE.Sim_Tox_Graz_PDE(C,T,xnon,ynon,xtox,ytox,FreqTox,PopDens,Ngrid,Nt,λ,Q,
                                                                Ptox,Pnon,mtox,mnon,Gtox,Gnon,HC,HT,qN,dt,kernel_2D,Δ)

    # Plot
    p1=scatter(xnon,ynon,xlabel="x [cm]",ylabel="y [cm]",
        mc=:steelblue,msc=:black,ms=1.8,msw=0.0,
        legend=false,reuse=false, #dpi=600)
        xlims=(0,L),ylims=(0,L),title="t = $tmax d",
        guidefontsize=8,titlefontsize=10)
    scatter!(xtox,ytox,mc=:red,msc=:black,ms=1.8,msw=0.0)
    p2=heatmap(1:dx:L,1:dx:L,transpose(C),clims=(minimum(C),maximum(C)),title="Nutrient conc.",titlefontsize=10,xlims=(0,L),ylims=(0,L))
    p3=heatmap(1:dx:L,1:dx:L,transpose(T),clims=(0,maximum(T)),title="Toxin conc.",titlefontsize=10,xlims=(0,L),ylims=(0,L))
    p4=plot(0:dt:tmax,PopDens[1:(Nt+1),:],reuse=false,legend=false,xlabel="t [d]",ylabel="Abundance",
        xlims=(0,tmax),ylim=(10^1,10^6),yaxis=:log,
        linecolor=[:steelblue :red],linewidth=2,guidefontsize=8)
    pall=plot(p1,p2,p3,p4)
    display(pall)
end

InitSimPlot()

# savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\Tox_Grazer\\HighHNResult")
