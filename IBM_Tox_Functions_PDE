module IBM_Tox_Functions_PDE

    export Sim_Tox_Graz_PDE

    using FastConv
    using Plots

    function Sim_Tox_Graz_PDE(C,T,xnon,ynon,xtox,ytox,FreqTox,PopDens,Ngrid,Nt,λ,Q,
                        Ptox,Pnon,mtox,mnon,Gtox,Gnon,HC,HT,qN,dt,kernel_2D,Δ)
        for t in 1:Nt
            ## 1. Birth and death of cells
            ### (a cell either reproduces or dies or does none of both in one time step)
            IndexTox=@. (ytox-1)*Ngrid+xtox         # Linear index - position of toxic cells
            IndexNon=@. (ynon-1)*Ngrid+xnon         # Linear index - position of non-toxic cells
            gtox=@. Gtox*(1.0-T[IndexTox]/(HT+T[IndexTox]))
            gnon=@. Gnon*(1.0-T[IndexNon]/(HT+T[IndexNon]))
            ptox=@. Ptox*C[IndexTox]/(HC+C[IndexTox])
            pnon=@. Pnon*C[IndexNon]/(HC+C[IndexNon])

            ### Toxic cells
            rv=rand(length(xtox))
            #### Death and survival
            CellsDead=rv.<=(mtox.+gtox)                # Indices of dying cells (marked with 'true')
            CellsSurv=rv.>(mtox.+gtox)                 # Indices of surviving cells (marked with 'true')
            xtox_dead=xtox[CellsDead]
            ytox_dead=ytox[CellsDead]
            xtox=xtox[CellsSurv]                       # Remove dead cells
            ytox=ytox[CellsSurv]                       # Remove dead cells
            #### Birth
            CellsReprod=rv[CellsSurv].>(1 .-ptox[CellsSurv])   # Indices of reproducing cells (marked with 'true')
            xtox_birth=xtox[CellsReprod]
            ytox_birth=ytox[CellsReprod]
            xtox=vcat(xtox,xtox_birth)
            ytox=vcat(ytox,ytox_birth)

            ### Non-toxic cells
            rv=rand(length(xnon))
            #### Death and survival
            CellsDead=rv.<=(mnon.+gnon)
            CellsSurv=rv.>(mnon.+gnon)
            xnon_dead=xnon[CellsDead]
            ynon_dead=ynon[CellsDead]
            xnon=xnon[CellsSurv]
            ynon=ynon[CellsSurv]
            #### Birth
            CellsReprod=rv[CellsSurv].>(1 .-pnon[CellsSurv])
            xnon_birth=xnon[CellsReprod]
            ynon_birth=ynon[CellsReprod]
            xnon=vcat(xnon,xnon_birth)
            ynon=vcat(ynon,ynon_birth)

            ### Update frequency of toxic cells and population densities
            FreqTox[t+1]=length(xtox)/(length(xtox)+length(xnon))
            PopDens[t+1,:]=[length(xnon),length(xtox)]

            ## 2. Consumption and recycling of Nutrients
            ### Consume Nutrients
            IndexBirth=(vcat(ytox_birth,ynon_birth).-1).*Ngrid.+vcat(xtox_birth,xnon_birth)   # Linear index - position of new born cells
            for i in IndexBirth
                C[i]=C[i]-qN
            end

            ### Recycle Nutrients
            IndexDeath=(vcat(ytox_dead,ynon_dead).-1).*Ngrid.+vcat(xtox_dead,xnon_dead)   # Linear index - position of dead cells
            for i in IndexDeath
                C[i]=C[i]+qN
            end


            ## 3. Toxin leakage and decay
            IndexTox=@. (ytox-1)*Ngrid+xtox
            T_decay=λ.*dt.*T
            ### Leak toxins
            for i in IndexTox
                T[i]=T[i]+Q*dt
            end
            ### Decay toxins
            T=T.-T_decay

            ## 4. Movement/Diffusion of cells, nutrients and toxins
            ### Move cells
            xnon = mod.(round.(Int, xnon.-1 .+ randn(length(xnon)) .* Δ),Ngrid) .+ 1
            ynon = mod.(round.(Int, ynon.-1 .+ randn(length(xnon)) .* Δ),Ngrid) .+ 1
            xtox = mod.(round.(Int, xtox.-1 .+ randn(length(xtox)) .* Δ),Ngrid) .+ 1
            ytox = mod.(round.(Int, ytox.-1 .+ randn(length(xtox)) .* Δ),Ngrid) .+ 1

            ### Diffuse nutrients
            Cnew=convn(C,kernel_2D)
            Cnew[:,2] = Cnew[:,2] .+ Cnew[:,end]
            Cnew[:,end-1] = Cnew[:,end-1] .+ Cnew[:,1]
            Cnew[2,:] = Cnew[2,:] .+ Cnew[end,:]
            Cnew[end-1,:] = Cnew[end-1,:] .+ Cnew[1,:]
            C=Cnew[2:end-1,2:end-1]

            ### Diffuse toxins
            Tnew=convn(T,kernel_2D)
            Tnew[:,2] = Tnew[:,2] .+ Tnew[:,end]
            Tnew[:,end-1] = Tnew[:,end-1] .+ Tnew[:,1]
            Tnew[2,:] = Tnew[2,:] .+ Tnew[end,:]
            Tnew[end-1,:] = Tnew[end-1,:] .+ Tnew[1,:]
            T=Tnew[2:end-1,2:end-1]

            # ## Plot
            # p1=scatter(xnon,ynon,xlabel="x [cm]",ylabel="y [cm]",
            #     mc=:steelblue,msc=:black,ms=1.8,msw=0.0,
            #     legend=false,reuse=false, #dpi=600)
            #     xlims=(0,Ngrid),ylims=(0,Ngrid),title="t = $t",
            #     guidefontsize=8,titlefontsize=10)
            # scatter!(xtox,ytox,mc=:red,msc=:black,ms=1.8,msw=0.0)
            # p2=heatmap(transpose(C),clims=(0,K),title="Nutrient conc.",titlefontsize=10)
            # p3=heatmap(transpose(T),clims=(0,100),title="Toxin conc.",titlefontsize=10)
            # p4=plot(0:dt:t*dt,PopDens[1:(t+1),:],reuse=false,legend=false,xlabel="t [days]",ylabel="Abundance",
            #     xlims=(0,Nt*dt),ylim=(10^1,10^6),yaxis=:log,
            #     linecolor=[:steelblue :red],linewidth=2,guidefontsize=8)
            # pall=plot(p1,p2,p3,p4)
            # display(pall)

        end

        return C, T, xnon, ynon, xtox, ytox, FreqTox, PopDens
    end

end #module


# ### Diffuse columns
# for i in 1:Ngrid
#     # C[:,i] = imfilter(C[:,i],kernel, "circular") # Convolution for diffusion with imfilter function, mode "circular" for torus
#     Cnew = convn(C[:,i],kernel) # convn is from Package FastConv
#     Cnew[2] = Cnew[2] + Cnew[end]
#     Cnew[end-1] = Cnew[end-1] + Cnew[1]
#     C[:,i]=Cnew[2:end-1]
# end
#
# ### Diffuse rows
# for i in 1:Ngrid
#     # C[i,:] = imfilter(C[i,:],kernel, "circular") # Convolution for diffusion with imfilter function, mode "circular" for torus
#     Cnew = convn(C[i,:],kernel)
#     Cnew[2] = Cnew[2] + Cnew[end]
#     Cnew[end-1] = Cnew[end-1] + Cnew[1]
#     C[i,:]=Cnew[2:end-1]
# end
