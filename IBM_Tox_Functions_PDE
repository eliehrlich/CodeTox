module IBM_Tox_Functions_PDE

    export Sim_Tox_Graz_PDE

    using FastConv
    using StatsBase
    using Random
    # using Plots

    function Diffusion(X::Array{Float64,2},kernel_2D::Array{Float64,2})
        Xnew=convn(X,kernel_2D)
        Xnew[:,2] .= Xnew[:,2] .+ Xnew[:,end]
        Xnew[:,end-1] .= Xnew[:,end-1] .+ Xnew[:,1]
        Xnew[2,:] .= Xnew[2,:] .+ Xnew[end,:]
        Xnew[end-1,:] .= Xnew[end-1,:] .+ Xnew[1,:]
        X.=Xnew[2:end-1,2:end-1]
        return X
    end

    function Move(xy::Array{Int64,1},Ngrid::Int64,Δ::Float64)
        mod.(round.(Int, xy.-1 .+ randn(length(xy)) .* Δ),Ngrid) .+ 1
    end

    function BirthDeathDice(prob::Array{Float64,1})
        rv=rand(length(prob))
        rv.<=prob
    end

    function LinIndex(x::Array{Int64,1},y::Array{Int64,1},Ngrid::Int64)
        @. (y-1)*Ngrid+x
    end

    function Sim_Tox_Graz_PDE(C::Array{Float64,2},T::Array{Float64,2},xnon::Array{Int64,1},ynon::Array{Int64,1},
                        xtox::Array{Int64,1},ytox::Array{Int64,1},FreqTox::Array{Float64,1},PopDens ::Array{Float64,2},
                        Ngrid::Int64,Nt::Int64,λ::Float64,Q::Float64,Ptox::Float64,Pnon::Float64,mtox::Float64,
                        mnon::Float64,Gtox::Float64,Gnon::Float64,HC::Float64,HT::Float64,
                        qN::Float64,dt::Float64,kernel_2D::Array{Float64,2},Δ::Float64)
        @inbounds for t in 1:Nt
            ## 1. Birth and death of cells
            PosTox=LinIndex(xtox,ytox,Ngrid)
            PosNon=LinIndex(xnon,ynon,Ngrid)
            Pos=vcat(PosTox,PosNon)
            ptox=@. Ptox*C[PosTox]/(HC+C[PosTox])
            pnon=@. Pnon*C[PosNon]/(HC+C[PosNon])
            p=vcat(ptox,pnon)
            gtox=@. Gtox*(1.0-T[PosTox]/(HT+T[PosTox]))
            gnon=@. Gnon*(1.0-T[PosNon]/(HT+T[PosNon]))

            x=vcat(xtox,xnon)
            y=vcat(ytox,ynon)

            ### Birth
            CellsReprod=BirthDeathDice(p)
            IndexReprod=(1:length(CellsReprod))[CellsReprod]
            shuffle!(IndexReprod) # random order
            xtox_birth=zeros(Int64,0) # initialize empty Array
            ytox_birth=zeros(Int64,0)
            xnon_birth=zeros(Int64,0)
            ynon_birth=zeros(Int64,0)
            # Threads.@threads
            for i in IndexReprod
                if C[x[i],y[i]]>=qN
                    if i <= length(xtox)
                        push!(xtox_birth,x[i])
                        push!(ytox_birth,y[i])
                    else
                        push!(xnon_birth,x[i])
                        push!(ynon_birth,y[i])
                    end
                    C[x[i],y[i]] -= qN
                end
            end

            ### Death
            CellsDeadTox=BirthDeathDice(mtox.+gtox)                # Indices of dying cells (marked with 'true')
            CellsDeadNon=BirthDeathDice(mnon.+gnon)
            xtox_dead=xtox[CellsDeadTox]
            ytox_dead=ytox[CellsDeadTox]
            xnon_dead=xnon[CellsDeadNon]
            ynon_dead=ynon[CellsDeadNon]

            ### Update population
            xtox=vcat(xtox[.!(CellsDeadTox)],xtox_birth)
            ytox=vcat(ytox[.!(CellsDeadTox)],ytox_birth)
            xnon=vcat(xnon[.!(CellsDeadNon)],xnon_birth)
            ynon=vcat(ynon[.!(CellsDeadNon)],ynon_birth)

            FreqTox[t+1]=length(xtox)/(length(xtox)+length(xnon))
            PopDens[t+1,:]=[length(xnon),length(xtox)]

            ## 2. Recycling of Nutrients
            PosDeath=LinIndex(vcat(xtox_dead,xnon_dead),vcat(ytox_dead,ynon_dead),Ngrid)   # Linear index - position of new born cells
            @inbounds for i in PosDeath
                C[i]=C[i]+qN
            end

            ## 3. Toxin leakage and decay
            PosTox=LinIndex(xtox,ytox,Ngrid)
            T_decay=λ.*dt.*T
            ### Leak toxins
            @inbounds for i in PosTox
                T[i]=T[i]+Q*dt
            end
            ### Decay toxins
            T.=T.-T_decay

            ## 4. Movement/Diffusion of cells, nutrients and toxins
            ### Move cells
            xtox = Move(xtox,Ngrid,Δ)
            ytox = Move(ytox,Ngrid,Δ)
            xnon = Move(xnon,Ngrid,Δ)
            ynon = Move(ynon,Ngrid,Δ)

            ### Diffuse nutrients
            C=Diffusion(C,kernel_2D)

            ### Diffuse toxins
            T=Diffusion(T,kernel_2D)

        end

        return C, T, xnon, ynon, xtox, ytox, FreqTox, PopDens
    end
end #module


# ### Diffuse columns
# for i in 1:Ngrid
#     # C[:,i] = imfilter(C[:,i],kernel, "circular") # Convolution for diffusion with imfilter function, mode "circular" for torus
#     Cnew = convn(C[:,i],kernel) # convn is from Package FastConv
#     Cnew[2] = Cnew[2] + Cnew[end]
#     Cnew[end-1] = Cnew[end-1] + Cnew[1]
#     C[:,i]=Cnew[2:end-1]
# end
#
# ### Diffuse rows
# for i in 1:Ngrid
#     # C[i,:] = imfilter(C[i,:],kernel, "circular") # Convolution for diffusion with imfilter function, mode "circular" for torus
#     Cnew = convn(C[i,:],kernel)
#     Cnew[2] = Cnew[2] + Cnew[end]
#     Cnew[end-1] = Cnew[end-1] + Cnew[1]
#     C[i,:]=Cnew[2:end-1]
# end
