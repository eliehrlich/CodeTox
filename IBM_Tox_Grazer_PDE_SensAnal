################################################################
# IBM for evolution of cells producing toxins as a public good #
#               Author: Elias Ehrlich                          #
#                 Date: 18/11/2019                             #
################################################################
# Packages
using Plots
using Colors
using Random
using NearestNeighbors
using Distances
#using DSP
using FastConv # manually modified package by replacing "conv2" with "conv" in elseif-clause, and adding "using DSP"
using BenchmarkTools
#using Distributed
using Statistics
using DelimitedFiles
using Measures
using StatsBase

include("./IBM_Tox_Functions_PDE")
using .IBM_Tox_Functions_PDE

# Random.seed!(1234)

function LoopInitSimPlot(SensPar::String,SaveFile::Bool,SavePlot::Bool)
    # Parameters
    ## Resolution: Time step [days], grid cell size [cm]
    dt=0.25 #0.02
    dx=1   #0.5

    ## Space width [cm] and simulation time [days]
    L=50
    tmax=100 #8000

    ## Number of grid cells on each axis, number of non-toxic and toxic cells, number of time steps
    Ngrid=ceil(Int, L/dx)
    Nnon=1000
    Ntox=100
    Nt=ceil(Int, tmax/dt)

    ## Initial, spatially averaged nutrient concentration [nmol ml^-1]
    K=0.1*dx^2  #0.01*dx^2

    ## Decay rate of toxins [d^-1], toxin leakage rate [1 fmol d^-1]
    λ=0.2
    Q=1.0

    λ_Stand=copy(λ)
    Q_Stand=copy(Q)

    ## Max. growth rate, natural mortality rate, max. grazing (loss) rate [d^-1]
    rtox=0.58
    rnon=0.6
    dtox=0.05
    dnon=0.05
    atox=0.3
    anon=0.3

    rtox_Stand=copy(rtox)
    amax_Stand=copy(atox)

    ## Max. birth probabilities, natural death probability and maximum graz. mortality probability
    Ptox=exp(rtox*dt)-1     #0.45
    Pnon=exp(rnon*dt)-1     #0.5
    mtox=-exp(-dtox*dt)+1   #0.15
    mnon=-exp(-dnon*dt)+1   #0.15
    Gtox=-exp(-atox*dt)+1   #0.2
    Gnon=-exp(-anon*dt)+1   #0.2

    ## Half-saturation constants for nutrients [nmol dx^-2] and toxin effect [fmol dx^-2]
    HC=0.05*dx^2   #K/5
    HT=0.8*dx^2

    HC_Stand=copy(HC)
    HT_Stand=copy(HT)

    ## Cell quota [nmol N cell^-1]
    qN=0.015

    ## Diffusivity of nutrients, toxins and cells [cm^2 d^-1]
    Dn=0.864
    Dc=0.05

    Dc_Stand=copy(Dc)

    ## Average diffusion distance of cells [units: dx=number of grid cells] per time step dt
    Δ=sqrt(2*Dc*dt)/dx

    ## Diffusion kernel (1 or 2 dimension). Warning! Dn/dx/dx*dt must be <1/3
    α=Dn/dx/dx*dt

    if α>1/3
        error("Time step to large")
    end
    kernel=α*[1,-2,1] + [0,1,0]

    kernel_2D=zeros(3,3)
    kernel_2D[2,:]=kernel
    for i in 1:3
        k2D = convn(kernel_2D[:,i],kernel) # convn is from Package FastConv
        kernel_2D[:,i]=k2D[2:end-1]
    end

    # Parameter loop
    Nparval=8
    Nrepl=2 #4
    Vec_Dc=[0.0001, 0.001, 0.01, 0.05, 0.1, 1, 10, 100]
    Vec_HT=@. LinRange(0.02,1.84,Nparval)*dx^2
    Vec_Q=LinRange(0,7/3,Nparval)
    Vec_gmax=LinRange(0.1,0.567,Nparval)
    Vec_HC=@. LinRange(0.02,0.09,Nparval)*dx^2
    Vec_rtox=LinRange(0.48,0.62,Nparval)
    Vec_λ=LinRange(0.1,1/3,Nparval)
    #Comb_Q_HC=collect(Base.product(Vec_Q,Vec_HC))

    ## Mean population densities and rel. frequency at tmax and corresponding standard deviation
    MeanPopDens=zeros(Nparval,2)
    SDPopDens=zeros(Nparval,2)
    MeanFreqTox=zeros(Nparval)
    SDFreqTox=zeros(Nparval)
    MeanPatchiness=zeros(Nparval,2)
    SDPatchiness=zeros(Nparval,2)
    MeanNumToxNeigh=zeros(Nparval,2)
    SDNumToxNeigh=zeros(Nparval,2)

    for i in 1:Nparval
        if SensPar=="Dc"
            Dc=Vec_Dc[i]
            ## Average diffusion distance of cells [units: dx=number of grid cells] per time step dt
            Δ=sqrt(2*Dc*dt)/dx
        elseif SensPar=="HT"
            HT=Vec_HT[i]
        elseif SensPar=="Q"
            Q=Vec_Q[i]
        elseif SensPar=="gmax"
            Gtox=-exp(-Vec_gmax[i]*dt)+1
            Gnon=-exp(-Vec_gmax[i]*dt)+1
        elseif SensPar=="HC"
            HC=Vec_HC[i]
        elseif SensPar=="rtox"
            Ptox=exp(Vec_rtox[i]*dt)-1
        elseif SensPar=="λ"
            λ=Vec_λ[i]
        end

        ## Allocation of results arrays for replicates
        PopDensRepl=zeros(Nrepl,2)
        FreqToxRepl=zeros(Nrepl)
        PatchinessRepl=zeros(Nrepl,2)
        NumToxNeighRepl=zeros(Nrepl,2)

        ## Replicate loop
        for j in 1:Nrepl
            # Initialization of nutrient conc., toxin conc. and cell positions
            InitC=K-qN*(Nnon+Ntox)/(Ngrid*Ngrid) # substract nutrients initially fixed in biomass
            C=fill(InitC,Ngrid,Ngrid)#2*K*rand(Ngrid,Ngrid)
            T=zeros(Ngrid,Ngrid)

            xnon=ceil.(Int,rand(Nnon)*Ngrid)
            ynon=ceil.(Int,rand(Nnon)*Ngrid)
            xtox=ceil.(Int,rand(Ntox)*Ngrid)
            ytox=ceil.(Int,rand(Ntox)*Ngrid)

            FreqTox=zeros(Nt+1)                 # Frequency of toxic cells
            FreqTox[1]=Ntox/(Ntox+Nnon)         # Initial frequency of toxic cells
            PopDens=zeros(Int64,Nt+1,2)               # Population density of non-toxic and toxic cells
            PopDens[1,:]=[Nnon,Ntox]            # Initial population densities

            # Run simulation
            C, T, xnon, ynon, xtox, ytox, FreqTox, PopDens = IBM_Tox_Functions_PDE.Sim_Tox_Graz_PDE(C,T,xnon,ynon,xtox,ytox,FreqTox,PopDens,Ngrid,Nt,λ,Q,
                                                                                Ptox,Pnon,mtox,mnon,Gtox,Gnon,HC,HT,qN,dt,kernel_2D,Δ)
            # Quantifying spatial heterogeneity
            NON=zeros(Int64,Ngrid,Ngrid) # for non-toxic cell concentrations
            TOX=zeros(Int64,Ngrid,Ngrid) # for toxic cell concentrations
            for k in 1:length(xnon); NON[xnon[k],ynon[k]]+=1; end
            for k in 1:length(xtox); TOX[xtox[k],ytox[k]]+=1; end
            var_NON=var(NON)
            mean_NON=mean(NON)
            var_TOX=var(TOX)
            mean_TOX=mean(TOX)
            Covariance=cov(vec(NON),vec(TOX))

            ## Lloyd's patchiness
            PatchinessRepl[j,1]=1+(var_NON-mean_NON)/mean_NON^2
            PatchinessRepl[j,2]=1+(var_TOX-mean_TOX)/mean_TOX^2

            ## Number of toxic neighbors
            NumToxNeighRepl[j,1]=Covariance/mean_NON+mean_TOX # for non-toxic cell
            NumToxNeighRepl[j,2]=mean_TOX+(var_TOX/mean_TOX-1)

            PopDensRepl[j,:]=mean(PopDens[floor(Int64,size(PopDens,1)/2):end,:],dims=1) # take the mean densities from the last half of the simulations
            FreqToxRepl[j]=PopDensRepl[j,2]/sum(PopDensRepl[j,:])
        end
        #println(CV_Repl)

        MeanPopDens[i,:]=mean(PopDensRepl,dims=1)
        SDPopDens[i,:]=std(PopDensRepl,dims=1)
        MeanFreqTox[i]=mean(FreqToxRepl)
        SDFreqTox[i]=std(FreqToxRepl)
        MeanPatchiness[i,:]=mean(PatchinessRepl,dims=1)
        SDPatchiness[i,:]=std(PatchinessRepl,dims=1)
        MeanNumToxNeigh[i,:]=mean(NumToxNeighRepl,dims=1)
        SDNumToxNeigh[i,:]=std(NumToxNeighRepl,dims=1)
    end
    println(MeanPopDens)
    #println(MeanDistToTox)
    #println(MeanCV)


    # Save data files
    if (SaveFile)
        Path="D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Data\\Tox_Grazer\\"
        if SensPar=="Dc"
            writedlm("$(Path)SensDc.txt", [Vec_Dc, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        elseif SensPar=="HT"
            writedlm("$(Path)SensHT.txt", [Vec_HT, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        elseif SensPar=="Q"
            writedlm("$(Path)SensQ.txt", [Vec_Q, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        elseif SensPar=="gmax"
            writedlm("$(Path)SensGmax.txt", [Vec_gmax, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        elseif SensPar=="HC"
            writedlm("$(Path)SensHC.txt", [Vec_HC, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        elseif SensPar=="rtox"
            writedlm("$(Path)Sens_rtox.txt", [Vec_rtox, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        elseif SensPar=="λ"
            writedlm("$(Path)SensLambda.txt", [Vec_λ, MeanPopDens[:,1], MeanPopDens[:,2], SDPopDens[:,1],SDPopDens[:,2], MeanFreqTox, SDFreqTox,
            MeanPatchiness[:,1], MeanPatchiness[:,2], SDPatchiness[:,1],SDPatchiness[:,2],MeanNumToxNeigh[:,1],MeanNumToxNeigh[:,2],SDNumToxNeigh[:,1],SDNumToxNeigh[:,2]], ',')
        end
        #XX=readdlm("$(Path)SensQ.txt",',')
    end # end of 'if (SaveFile)'

    # Plotting
    Path="D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\Tox_Grazer\\Sensivity\\"
    if SensPar=="Dc"
        p1=scatter(Vec_Dc, MeanPopDens, yerror = SDPopDens,xaxis=:log, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false,xlabel="Dc [cm^2 d^-1]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([Dc_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_Dc, MeanPatchiness, yerror=SDPatchiness, xaxis=:log, ms = 6, mc=[:steelblue :red],legend=false,
            title="Diffusivity of cells",xlabel="Dc [cm^2 d^-1]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([Dc_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_Dc, MeanNumToxNeigh, yerror=SDNumToxNeigh, xaxis=:log, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="Dc [cm^2 d^-1]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([Dc_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensDc"); end

        p1=scatter(Vec_Dc./86400, MeanPopDens, yerror = SDPopDens,xaxis=:log, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false,xlabel="Dc [cm^2 s^-1]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([Dc_Stand/86400], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_Dc/86400, MeanPatchiness, yerror=SDPatchiness, xaxis=:log, ms = 6, mc=[:steelblue :red],legend=false,
            title="Diffusivity of cells",xlabel="Dc [cm^2 s^-1]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([Dc_Stand/86400], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_Dc./86400, MeanNumToxNeigh, yerror=SDNumToxNeigh, xaxis=:log, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="Dc [cm^2 s^-1]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([Dc_Stand/86400], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensDc_per_sec"); end
    elseif SensPar=="HT"
        p1=scatter(Vec_HT, MeanPopDens, yerror = SDPopDens, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false,xlabel="HT [nmol T cm^-2]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([HT_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_HT, MeanPatchiness, yerror=SDPatchiness, ms = 6, mc=[:steelblue :red],legend=false,
            title="Half-sat. for toxin effect",xlabel="HT [nmol T cm^-2]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([HT_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_HT, MeanNumToxNeigh, yerror=SDNumToxNeigh, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="HT [nmol T cm^-2]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([HT_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensHT"); end
    elseif SensPar=="Q"
        p1=scatter(Vec_Q, MeanPopDens, yerror = SDPopDens, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false, xlabel="Q [fmol d^-1]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([Q_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_Q, MeanPatchiness, yerror=SDPatchiness, ms = 6, mc=[:steelblue :red],legend=false,
            title="Toxin leakage rate",xlabel="Q [fmol d^-1]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([Q_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_Q, MeanNumToxNeigh, yerror=SDNumToxNeigh, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="Q [fmol d^-1]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([Q_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensQ"); end
    elseif SensPar=="gmax"
        p1=scatter(Vec_gmax, MeanPopDens, yerror = SDPopDens, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false, xlabel="gmax [d^-1]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([amax_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_gmax, MeanPatchiness, yerror=SDPatchiness, ms = 6, mc=[:steelblue :red],legend=false,
            title="Grazing mortality",xlabel="gmax [d^-1]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([amax_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_gmax, MeanNumToxNeigh, yerror=SDNumToxNeigh, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="gmax [d^-1]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([amax_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensGmax"); end
    elseif SensPar=="HC"
        p1=scatter(Vec_HC, MeanPopDens, yerror = SDPopDens, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false, xlabel="HN [nmol N cm^-2]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([HC_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_HC, MeanPatchiness, yerror=SDPatchiness, ms = 6, mc=[:steelblue :red],legend=false,
            title="Half-sat. for nutrients",xlabel="HN [nmol N cm^-2]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([HC_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_HC, MeanNumToxNeigh, yerror=SDNumToxNeigh, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="HN [nmol N cm^-2]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([HC_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensHC"); end
    elseif SensPar=="rtox"
        p1=scatter(Vec_rtox, MeanPopDens, yerror = SDPopDens, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false, xlabel="b_max,tox [d^-1]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([rtox_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_rtox, MeanPatchiness, yerror=SDPatchiness, ms = 6, mc=[:steelblue :red],legend=false,
            title="Max. growth rate toxic cells",xlabel="b_max,tox [d^-1]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([rtox_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_rtox, MeanNumToxNeigh, yerror=SDNumToxNeigh, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="b_max,tox [d^-1]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([rtox_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)Sensrtox"); end
    elseif SensPar=="λ"
        p1=scatter(Vec_λ, MeanPopDens, yerror = SDPopDens, yaxis=:log, ms = 6, mc=[:steelblue :red],
            legend=false, xlabel="lambda [d^-1]", ylabel="Abundance",ylim=(10^1,10^6),left_margin=8mm,bottom_margin=6mm)
        plot!([λ_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p2=scatter(Vec_λ, MeanPatchiness, yerror=SDPatchiness, ms = 6, mc=[:steelblue :red],legend=false,
            title="Toxin decay rate",xlabel="lambda [d^-1]", ylabel="Patchiness",left_margin=8mm,bottom_margin=6mm)
        plot!([λ_Stand], seriestype="vline",colour=[:black], ls=[:dash])
        p3=scatter(Vec_λ, MeanNumToxNeigh, yerror=SDNumToxNeigh, ms = 6, mc=[:steelblue :red],legend=false,
            xlabel="lambda [d^-1]", ylabel="Mean # of toxic neighbors",left_margin=8mm,bottom_margin=6mm)
        plot!([λ_Stand], seriestype="vline",colour=[:black], ls=[:dash])

        pall=plot(p1,p2,p3,layout=(1,3))
        plot!(size=(1000,280),dpi=600)
        display(pall)
        if (SavePlot); savefig("$(Path)SensLambda"); end
    end

end

#SensParVec=["Dc","rtox","HT","Q","λ","gmax","HC"]
SensParVec=["Q"]
SaveFile=false
SavePlot=false

for i in 1:length(SensParVec)
    @time LoopInitSimPlot(SensParVec[i],SaveFile,SavePlot)
end

# writedlm("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Data\\gmax_Mean&SD_Dens&Freq.csv",
#     hcat(Vec_amax,MeanPopDens,SDPopDens,MeanFreqTox,SDFreqTox), ',')
# # Res=readdlm("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Data\\HT_Mean&SD_Dens&Freq.csv", ',', Float64)
#
# # Plot
# p1=scatter(Vec_amax,MeanPopDens,reuse=false,legend=false,xlabel="\$ g_{max} [d^{-1}] \$",ylabel="Mean abundance",
#     ylim=(10^1,10^5),yaxis=:log,yerror=SDPopDens,
#     linecolor=[:steelblue :red],linewidth=2,guidefontsize=12)
# p2=scatter(Vec_amax,MeanFreqTox,reuse=false,legend=false,xlabel="\$ g_{max} [d^{-1}] \$",ylabel="Mean relative frequency of toxic cells",
#     ylim=(0,1),yerror=SDFreqTox,markercolor = [:black],
#     linecolor=[:black],linewidth=2,guidefontsize=12)
# pall=plot(p1,p2)
# plot!(size=(800,400), margin=10mm, title="t = $tmax d")
# display(pall)

# savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\Tox_Grazer\\SensAna_gmax")
