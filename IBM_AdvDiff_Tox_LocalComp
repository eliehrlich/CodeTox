################################################################
# IBM for evolution of cells producing toxins as a public good #
#               Author: Elias Ehrlich                          #
#                 Date: 26/05/2019                             #
################################################################
## Packages
using Plots
using Colors
using Distributions
using Random

include("./IBM_FunctModule")
using .IBM_FunctModule

#Random.seed!(1234)

# Parameters
## Resolution: Time step [days], grid cell size [cm]
dt=1.0
dx=0.1

## Space width [cm] and simulation time [days]
L=50
tmax=10

## Number of grid cells on each axis, number of non-toxic and toxic cells, number of time steps
Ngrid=ceil(Int, L/dx)
Nnon=1000
Ntox=100
Nt=ceil(Int, tmax/dt)

## Decay rate of toxins [d^-1], toxin leakage rate [1 fmol d^-1]
λ=0.2
Q=1.0

## Max. growth rate, natural mortality rate, max. grazing (loss) rate [d^-1]
rtox=0.38
rnon=0.40
dtox=0.05
dnon=0.05
atox=0.22
anon=0.22

## Max. birth probabilities, natural death probability and maximum graz. mortality probability
Ptox=0.4 #exp(rtox*dt)-1     #0.45
Pnon=0.5 #exp(rnon*dt)-1     #0.5
mtox=0.2 #-exp(-dtox*dt)+1   #0.15
mnon=0.2 #-exp(-dnon*dt)+1   #0.15
Gtox=0.2 #-exp(-atox*dt)+1   #0.2
Gnon=0.2 #-exp(-anon*dt)+1   #0.2

## Half-saturation constants for competition effect and toxin effect [fmol dx^-2]
HC=8
HT=2  #0.8*dx^2 #0.02*dx^2

## Diffusivity of molecules (nutrients and toxins) and cells [cm^2 d^-1]
Dm=0.864
Dc=8.640 #8.640

## Average diffusion distance of cells and molecules [units: dx=number of grid cells] per time step dt
Δ_m=sqrt(2*Dm*dt)/dx    # standard dev. of multivariate Gaussian distributed competition and toxin effect
Δ_c=sqrt(2*Dc*dt)/dx    # root mean square (standard dev.) of Gaussian distributed random variable for diffusion

## Turbulence
U=0.1         # amplitude of turbulence movement wave

# ## Parameters
# L=2*10^3        # Number of discrete 'positions' per dimension (L=10^4 --> resolution 0.0001 = 1mm)
# tmax=10       # simulation steps
# N0=4*10^4       # initial number of cells
# c0=0.1        # initial frequency of toxic cells
# Δ=0.001       # root mean square (standard dev.) of Gaussian distributed random variable for diffusion
#
# Δ_T=0.001     # standard dev. of multivariate Gaussian distributed toxin effect
# Δ_Comp=0.001     # standard dev. of multivariate Gaussian distributed competition effect
# H=2           # toxicity at which grazing loss probability is halfed
# Nmax=10^6     # total resources in units of cells (maximum number of cells)
# HC=8       # half-sat. of toxic cells
# HD=8      # half-sat. of non-toxic cells
#
# # Steady of non-toxic cell monoculture
# R=(qD+gD_max)/pD_max*HD/(1-(qD+gD_max)/pD_max)
# D=Nmax-R

## Predefine local toxicity environment around one cell
xTox=range(-2*Δ_m,2*Δ_m,step=dx)   # local x-range
yTox=range(-2*Δ_m,2*Δ_m,step=dx)   # local y-range
n=length(xTox)                  # number of patches along range
nC=floor(Int,(n-1)/2)           # number of patches from outer margin of local env. to central toxic cell
LocalTox=zeros(n,n)             # local toxicity environment around one toxic cell
for i in 1:n, j in 1:n
    LocalTox[i,j] = pdf(MvNormal([0.0; 0.0], [Δ_m^2 0.0; 0.0 Δ_m^2]),[xTox[i];yTox[j]]) # pdf of multivariate normal distribution
end
MaxP=pdf(MvNormal([0.0; 0.0], [Δ_m^2 0.0; 0.0 Δ_m^2]),[0;0]) # probability density at mean x and mean y
LocalTox=LocalTox./MaxP         # rescale the values --> between 0 and 1
surface(xTox,yTox,LocalTox, size=[800,480],camera=(50,50),xlabel="x",ylabel="y",zlabel="toxin conc.",dpi=600)

#savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\LocalToxEnv")

## Predefine local competition environment around one cell
xComp=range(-2*Δ_m,2*Δ_m,step=dx)   # local x-range
yComp=range(-2*Δ_m,2*Δ_m,step=dx)   # local y-range
n=length(xComp)                  # number of patches along range
nComp=floor(Int,(n-1)/2)           # number of patches from outer margin of local env. to central toxic cell
LocalComp=zeros(n,n)             # local toxicity environment around one toxic cell
for i in 1:n, j in 1:n
    LocalComp[i,j] = pdf(MvNormal([0.0; 0.0], [Δ_m^2 0.0; 0.0 Δ_m^2]),[xComp[i];yComp[j]]) # pdf of multivariate normal distribution
end
MaxPComp=pdf(MvNormal([0.0; 0.0], [Δ_m^2 0.0; 0.0 Δ_m^2]),[0;0]) # probability density at mean x and mean y
LocalComp=LocalComp./MaxPComp

## Initialization
Atox = rand(1:Ngrid,(Ntox,2))  # Toxic cells --> random x- and y-positions
Anon = rand(1:Ngrid,(Nnon,2)) # Non-toxic cells --> random x- and y-positions

# scatter(Anon[:,1].*dx,Anon[:,2].*dx,xlabel="x",ylabel="y",
#     mc=:steelblue,msc=:black,ms=2,msw=0.0,
#     legend=false,dpi=600,reuse=false)
# scatter!(Atox[:,1].*dx,Atox[:,2].*dx,mc=:red,msc=:black,ms=2,msw=0.0)
# xlims!((0.0,1.0))
# ylims!((0.0,1.0))

#savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\Tox_AdvDiff_t0")

FreqTox=zeros(Nt+1)             # frequency of toxic cells
FreqTox[1]=Ntox/(Ntox+Nnon)     # initial frequency of toxic cells
PopDens=zeros(Nt+1,2)           # population density of toxic and non-toxic cells
PopDens[1,:]=[Ntox,Nnon]        # initial population densities

## Simulate
function Simulate(Atox, Anon, FreqTox, PopDens, tmax, LocalTox, LocalComp, L,Δ,U,pC_max,qC,pD_max,qD,gC_max,gD_max,H,Nmax,HC,HD,nC,nComp)
    @time for t in 1:Nt
        Atox, Anon = IBM_FunctModule.AdvDiffToxLocal(AC,AD,LocalTox,LocalComp,L,Δ,U,pC_max,qC,pD_max,qD,gC_max,gD_max,H,Nmax,HC,HD,nC,nComp)

        FreqTox[t+1]=size(Atox,1)/(size(Atox,1)+size(Anon,1))     # frequency of toxic cells
        PopDens[t+1,:]=[size(Atox,1),size(Anon,1)]
    end

    return AC, AD, FreqC_timeser, PopDens
end

AC, AD, FreqC_timeser, PopDens = Simulate(AC, AD, FreqC_timeser, PopDens, tmax, LocalTox, LocalComp, L,Δ,U,pC_max,qC,pD_max,qD,gC_max,gD_max,H,Nmax,HC,HD,nC,nComp)

p1=scatter(AD[:,1]./L,AD[:,2]./L,xlabel="x",ylabel="y",
    mc=:steelblue,msc=:black,ms=1.8,msw=0.0,
    legend=false,reuse=false, #dpi=600,
    xlims=(0.0,1.0),ylims=(0.0,1.0))
#scatter!(AC[:,1]./L,AC[:,2]./L,mc=:red,msc=:black,ms=1.8,msw=0.0)

p2=plot(0:tmax,FreqC_timeser[1:(tmax+1)],reuse=false,legend=false,
    xlabel="t",ylabel="Freq. of toxic cells",xlims=(0,tmax),ylims=(0.0,1.0),
    linecolor=:black,linewidth=2)

p3=plot(0:tmax,PopDens[1:(tmax+1),:],reuse=false,legend=false,xlabel="t",ylabel="Abundance",
    xlims=(0,tmax),ylim=(10^1,10^6),yaxis=:log,
    linecolor=[:red :steelblue],linewidth=2)

#plot(p1,p2,p3, layout=@layout [a{0.8w} grid(2,1)])#grid(3,1,heights=[0.6,0.2,0.2]))
plot(p1,p2,p3, layout=@layout [a{0.75h} ; b c])#, size=(600,400))#grid(3,1,heights=[0.6,0.2,0.2]))
plot!(size=(600,600))#,left_margin=10mm,bottom_margin=[10mm 1mm])
plot!(title=["a" "b" "c"],title_location=:left)

# savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\AdvDiff_Tox_Local_NoNonTox_t$tmax")
