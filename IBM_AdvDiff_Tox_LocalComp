################################################################
# IBM for evolution of cells producing toxins as a public good #
#               Author: Elias Ehrlich                          #
#                 Date: 26/05/2019                             #
################################################################
## Packages
using Plots
using Colors
using Distributions
using Random

include("./IBM_FunctModule")
using .IBM_FunctModule

#Random.seed!(1234)

## Parameters
L=2*10^3        # Number of discrete 'positions' per dimension (L=10^4 --> resolution 0.0001 = 1mm)
tmax=30       # simulation steps
N0=4*10^4       # initial number of cells
c0=0.1        # initial frequency of toxic cells
Δ=0.001       # root mean square (standard dev.) of Gaussian distributed random variable for diffusion
U=0.1         # amplitude of turbulence movement wave
pC_max=0.4   # max. birth probability of toxic cells
qC=0.2       # death probability of toxic cells
pD_max=0.5   # max. birth probability of non-toxic cells
qD=0.2       # death probability of non-toxic cells
gC_max=0.2    # maximum grazing loss probability of toxic cells
gD_max=0.2    # maximum grazing loss probability of non-toxic cells
Δ_T=0.001     # standard dev. of multivariate Gaussian distributed toxin effect
Δ_Comp=0.001     # standard dev. of multivariate Gaussian distributed competition effect
H=2           # toxicity at which grazing loss probability is halfed
Nmax=10^6     # total resources in units of cells (maximum number of cells)
HC=8       # half-sat. of toxic cells
HD=8      # half-sat. of non-toxic cells

# Steady of non-toxic cell monoculture
R=(qD+gD_max)/pD_max*HD/(1-(qD+gD_max)/pD_max)
D=Nmax-R

## Predefine local toxicity environment around one cell
xTox=range(-3*Δ_T,3*Δ_T,step=1/L)   # local x-range
yTox=range(-3*Δ_T,3*Δ_T,step=1/L)   # local y-range
n=length(xTox)                  # number of patches along range
nC=floor(Int,(n-1)/2)           # number of patches from outer margin of local env. to central toxic cell
LocalTox=zeros(n,n)             # local toxicity environment around one toxic cell
for i in 1:n, j in 1:n
    LocalTox[i,j] = pdf(MvNormal([0.0; 0.0], [Δ_T^2 0.0; 0.0 Δ_T^2]),[xTox[i];yTox[j]]) # pdf of multivariate normal distribution
end
MaxP=pdf(MvNormal([0.0; 0.0], [Δ_T^2 0.0; 0.0 Δ_T^2]),[0;0]) # probability density at mean x and mean y
LocalTox=LocalTox./MaxP         # rescale the values --> between 0 and 1
#surface(xTox,yTox,LocalTox, size=[800,480],camera=(50,50),xlabel="x",ylabel="y",zlabel="toxin conc.",dpi=600)

#savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\LocalToxEnv")

## Predefine local competition environment around one cell
xComp=range(-3*Δ_Comp,3*Δ_Comp,step=1/L)   # local x-range
yComp=range(-3*Δ_Comp,3*Δ_Comp,step=1/L)   # local y-range
n=length(xComp)                  # number of patches along range
nComp=floor(Int,(n-1)/2)           # number of patches from outer margin of local env. to central toxic cell
LocalComp=zeros(n,n)             # local toxicity environment around one toxic cell
for i in 1:n, j in 1:n
    LocalComp[i,j] = pdf(MvNormal([0.0; 0.0], [Δ_Comp^2 0.0; 0.0 Δ_Comp^2]),[xComp[i];yComp[j]]) # pdf of multivariate normal distribution
end
MaxPComp=pdf(MvNormal([0.0; 0.0], [Δ_Comp^2 0.0; 0.0 Δ_Comp^2]),[0;0]) # probability density at mean x and mean y
LocalComp=LocalComp./MaxPComp

## Initialization
AC = rand(0:L,(floor(Int,c0*N0),2))  # Toxic cells --> random x- and y-positions between 0 and L
AD = rand(0:L,(floor(Int,(1-c0)*N0),2))  # Non-toxic cells --> random x- and y-positions between 0 and L

# scatter(AD[:,1]./L,AD[:,2]./L,xlabel="x",ylabel="y",
#     mc=:steelblue,msc=:black,ms=2,msw=0.0,
#     legend=false,dpi=600,reuse=false)
# scatter!(AC[:,1]./L,AC[:,2]./L,mc=:red,msc=:black,ms=2,msw=0.0)
# xlims!((0.0,1.0))
# ylims!((0.0,1.0))

#savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\Tox_AdvDiff_t0")

FreqC_timeser=zeros(tmax+1)                             # frequency of toxic cells
FreqC_timeser[1]=size(AC,1)/(size(AC,1)+size(AD,1))     # initial frequency of toxic cells

PopDens=zeros(tmax+1,2)                                 # population density of toxic and non-toxic cells
PopDens[1,:]=[size(AC,1),size(AD,1)]

## Simulate
function Simulate(AC, AD, FreqC_timeser, PopDens, tmax, LocalTox, LocalComp, L,Δ,U,pC_max,qC,pD_max,qD,gC_max,gD_max,H,Nmax,HC,HD,nC,nComp)
    @time for t in 1:tmax
        AC, AD = IBM_FunctModule.AdvDiffToxLocal(AC,AD,LocalTox,LocalComp,L,Δ,U,pC_max,qC,pD_max,qD,gC_max,gD_max,H,Nmax,HC,HD,nC,nComp)

        FreqC_timeser[t+1]=size(AC,1)/(size(AC,1)+size(AD,1))     # frequency of toxic cells
        PopDens[t+1,:]=[size(AC,1),size(AD,1)]
    end

    return AC, AD, FreqC_timeser, PopDens
end

AC, AD, FreqC_timeser, PopDens = Simulate(AC, AD, FreqC_timeser, PopDens, tmax, LocalTox, LocalComp, L,Δ,U,pC_max,qC,pD_max,qD,gC_max,gD_max,H,Nmax,HC,HD,nC,nComp)

@time scatter(AD[:,1]./L,AD[:,2]./L,xlabel="x",ylabel="y",
    mc=:steelblue,msc=:black,ms=1.8,msw=0.0,
    legend=false,dpi=600,reuse=false)
scatter!(AC[:,1]./L,AC[:,2]./L,mc=:red,msc=:black,ms=1.8,msw=0.0)
xlims!((0.0,1.0))
ylims!((0.0,1.0))
##savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\Tox_AdvDiff_t$tmax")

tt=0:tmax
plot(tt,FreqC_timeser,reuse=false,legend=false,xlabel="t",ylabel="Frequency of toxic cells",ylim=(0.0,1.0)) # --> a line
scatter!(tt,FreqC_timeser) # --> dots --> "!" = mutate plot --> add dots to previous plot
#savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\Tox_Freq_HighGraz_HighConstCosts")

plot(tt,PopDens,reuse=false,legend=false,xlabel="t",ylabel="Pop. dens.",yaxis=:log,#ylim=(0.0,10^6),
    linecolor=[:red :steelblue]) # --> a line
scatter!(tt,PopDens,markercolor=[:red :steelblue]) # --> dots --> "!" = mutate plot --> add dots to previous plot
#savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\Tox_PopDens_Feedback_LongRun")

# xTotal=range(0,1,length=L+1)
# yTotal=range(0,1,length=L+1)
# surface(xTotal[6000:8000],yTotal[2000:4000],transpose(GlobalTox[6000:8000,2000:4000]),xlabel="x",ylabel="y")
# savefig("D:\\Forschung\\Denmark Ocean Life\\Toxicity Project\\Figures\\AdvDiff\\GlobalTox_t$tmax")
