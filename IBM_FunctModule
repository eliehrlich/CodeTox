module IBM_FunctModule

    export MultiCell

    function MultiCell(Ax_init,Ay_init,N_patch,pmax_x,pmax_y,K,dmax_x,dmax_y,H,m)
        Ax=copy(Ax_init)
        Ay=copy(Ay_init)
        Ax1=copy(Ax_init)
        Ay1=copy(Ay_init)

        # Birth and death
        for i in 1:N_patch # go through all patches
            # For toxic cells
            for j in 1:Ax[i] # go through all cells in a patch
                px=pmax_x*(1-(Ax[i]+Ay[i])/K) # birth probability
                dx=dmax_x*(1-Ax[i]/(H+Ax[i])) # death probability
                if rand()<=px;
                    Ax1[i]+=1                 # Birth
                end
                if rand()<=dx
                    Ax1[i]-=1                 # Death
                end
            end

            # For non-toxic cells
            for k in 1:Ay[i] # go through all cells in a patch
                py=pmax_y*(1-(Ax[i]+Ay[i])/K) # birth probability
                dy=dmax_y*(1-Ax[i]/(H+Ax[i])) # death probability
                if rand()<=py
                    Ay1[i]+=1                 # Birth
                end
                if rand()<=dy
                    Ay1[i]-=1                 # Death
                end
            end
        end

        Ax=copy(Ax1)  # update Ax
        Ay=copy(Ay1)  # update Ay

        # Mixture of water volume - altering position of cells
        for i in 1:N_patch # go through all patches
            # For toxic cells
            for j in 1:Ax[i] # go through all cells in a patch
                if rand()<=m
                    Ax1[i]-=1  # remove the cell from the patch
                    if rand()<=0.5
                        if i!=1
                            Ax1[i-1]+=1 # move the cell to the left
                        else #i==1 -> first element/left margin
                            Ax1[N_patch]+=1 # move from the first element to the last element (torus)
                        end
                    else
                        if i!=N_patch
                            Ax1[i+1]+=1  # move the cell to the right
                        else #i==N_patch -> last element/right margin
                            Ax1[1]+=1 # move from the last element to the first element (torus)
                        end
                    end
                end
            end

            # For non-toxic cells
            for k in 1:Ay[i] # go through all cells in a patch
                if rand()<=m
                    Ay1[i]-=1  # remove the cell from the patch
                    if rand()<=0.5
                        if i!=1
                            Ay1[i-1]+=1 # move the cell to the left
                        else #i==1 -> first element/left margin
                            Ay1[N_patch]+=1 # move from the first element to the last element (torus)
                        end
                    else
                        if i!=N_patch
                            Ay1[i+1]+=1  # move the cell to the right
                        else #i==N_patch -> last element/right margin
                            Ay1[1]+=1 # move from the last element to the first element (torus)
                        end
                    end
                end
            end
        end

        return Ax1, Ay1
    end #function
end #module
